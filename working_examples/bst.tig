let
    type intArray = array of int
    var ar := intArray[10] of 0

    function inittArray(ar: intArray, n: int) : intArray =
    (
        ar[n] := n;
        if n = 0
        then ar
        else inittArray(ar, n - 1)
    )

    function printArray(ar: intArray,n: int) =
    (
        print(itoa(ar[n]));
        print("\n");
        if n = 0
        then ()
        else printArray(ar, n - 1)
    )

    function linear_search(ar: intArray,length: int, element: int) : int =
            if ar[length] = element
            then length
            else if length = 0
            then -1
            else linear_search(ar, length - 1, element)


/*
    function binary_search(ar: intArray, key: int) : int =
        let var lo := 0
            var hi := 10 - 1
        in 
        (
            while (lo <= hi) do
            let var mid := lo + (10 - lo) / 2
            in 
                if (key < ar[mid])
                then hi := mid - 1
                else if (key > ar[mid])
                then lo := mid + 1
                else ()
            end;
            5
	)
        end
*/

    function midpoint(imin: int, imax: int) : int =
        imin + (imax - imin) / 2

        

    function binary_search(ar: intArray, key: int, imin: int, imax: int) : int =
        if (imax < imin)
        then -1
        else (
             let var imid := midpoint(imin, imax)
                 var arr := ar[imid]
             in
             if (arr > key)
             then binary_search(ar, key, imin, imid-1)
             else imid
             end
             )

   var arr := inittArray(ar, 9)
   var key := 10
   var res := linear_search(ar, 9, key)
in
    if res >= 0
    then (
            print("Key found in index ");
            print(itoa(res));
            print("\n")
         )
    else print("Key not found\n")
end
